# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  maven: circleci/maven@1.3.0
#orbs:   // orb not working
#  allure: ayte/allure@0.1.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    parallelism: 8
    working_directory: ~/TestAutomation
    parameters:
      version:
        description: Allure version to use
        type: string
        default: 2.13.1
    steps:
      # Checkout the code as the first step.
      - checkout
      # Use mvn clean and package as the standard maven build phase
      # Download and cache dependencies
      - run:
          name: Allure archive download
          command: >-
            curl -L https://github.com/allure-framework/allure2/releases/download/<<
            parameters.version >>/allure-commandline-<< parameters.version >>.zip -o
            /tmp/allure.zip
      - run:
          name: Archive extraction
          command: unzip /tmp/allure.zip
      - run:
          name: Allure installation
          command: sudo mv allure-<< parameters.version >> /usr/local/share/allure
      - run:
          name: Allure binary symlinking
          command: sudo ln -s /usr/local/share/allure/bin/allure /usr/local/bin/allure
        # Then run your tests and generate report!
      - run:
          name: Test
          command: |
              TEST=$(circleci tests glob "src/test/*.java" | circleci tests split --split-by=timings)
              mvn clean test $TEST
          

      - run:
          name: Generate Report
          command:
            allure generate --clean
          when: always

      - store_artifacts:
          path: allure-report/index.html

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
